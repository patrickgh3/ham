<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hasDied=false; 
waves = ds_list_create()

var w = scr_spawnWave(x, y, TRACK.VOCALS)
ds_list_add(waves, w)

var w = scr_spawnWave(x, y, TRACK.DRUMS)
ds_list_add(waves, w)

var w = scr_spawnWave(x, y, TRACK.BASS)
ds_list_add(waves, w)

var w = scr_spawnWave(x, y, TRACK.GUITAR)
ds_list_add(waves, w)

// List of tracks we lost in the order we lost them
tracksLost = ds_list_create()

// Add initial tracks in a random order.
//ds_list_add(tracksLost, TRACK.DRUMS, TRACK.GUITAR, TRACK.VOCALS)
//ds_list_shuffle(tracksLost)

// 0 - playing (normal)
// 1 - frozen for ending cutscene
// 2 - dead from game over
state = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(tracksLost)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var s = audio_play_sound(sndSpace, 1, true)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Player controled
if state == 0 {
    // Move onwards
    y -= 5
    
    // Player moves up and down.
    if keyboard_check(vk_left) or keyboard_check(ord('A')) {
        x -= 8
    } else if keyboard_check(vk_right) or keyboard_check(ord('D')) {
        x += 8
    }
    
    x = clamp(x, 40, room_width-40)
    
    // Switch wave order
    if ds_list_size(waves) &gt; 1 {
        if (keyboard_check_pressed(vk_space)) {
            audio_play_sound(sndRotation, 0.5, false)
            var w = waves[|0]
            ds_list_delete(waves, 0)
            ds_list_add(waves, w)
        }
    }

// Ending
}  if state == 1 {
    // Move onwards
    y -= 5

    // Move to target x position
    var xTarget = objAlienRadioTower.x
    var delta = 2
    
    if abs(x-xTarget) &lt; delta {
        x = xTarget
    } else {
        if x &lt; xTarget {
            x += delta
        } else if x &gt; xTarget {
            x -= delta
        }
    }
    
    if collision_point(x, y, objAlienRadioTower, false, false) {
        for (var i=0; i&lt;ds_list_size(waves); i++) {
            var w = waves[|i];
            w.dead = true
        }
        instance_destroy()
        instance_create(0, 0, objEndCutscene)
    }
    
// Dead from game over
} else if state == 2 {
    y -= 2;
    if (hasDied==false)
    {
    var r = instance_create(0,0,obj_restart);
    r.visible = false
    r.alarm[0] = 60
    hasDied=true;
    } 
}

// Move waves to their position relative to me.

var n = ds_list_size(waves)
for (var i=0; i&lt;n; i++) {
    var angle = 90 + i/n*360
    var r = 23
    
    var xTarget = x+lengthdir_x(r, angle)
    var yTarget = y+lengthdir_y(r, angle)
    //var xTarget = x + 30*(i-(n-1)/2);
    
    var w = waves[|i];
    var snap = 0.2
    if w.joining snap = 0.1
    
    w.x += (xTarget-w.x)*snap
    w.y += (yTarget-w.y)*0.2
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// temp draw square
//draw_set_color(c_white)
//draw_rectangle(x-3, y-3, x+3, y+3, false)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
