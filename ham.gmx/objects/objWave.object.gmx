<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum TRACK {
    BASS,
    DRUMS,
    GUITAR,
    VOCALS,
}

type = TRACK.BASS // type of track - bass, drums, guitar, or vocals.
color = c_aqua
headOffset = 20
sound = -1

// Record recent positions
recentLength = 100
for (var i=0; i&lt;recentLength; i++) {
    xRecent[i] = x
    yRecent[i] = y
}
recentI = 0

// whether we're in the process of joining the group (from a powerup)
joining = false

dead = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if audio_exists(sound) {
    audio_stop_sound(sound)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>joining = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if not joining and not dead {
    // Collide with space junk
    
    var c = collision_circle(x, y+headOffset, 10, objObstParent, true, false)
    if c != noone {
        dead = true
        
        with c {
            instance_destroy()
        }
        
        // Remove the wave from the waves list
        with objPlayer {
            var i = ds_list_find_index(waves, other.id)
            ds_list_delete(waves, i)
            
            ds_list_add(tracksLost, other.type)
            
            audio_play_sound(choose(sndExplosion, sndExplosion2), 0.5, false)
            
            // Losing the last wave
            if ds_list_size(waves) == 0 {
                //instance_destroy()
            }
        }
    }
    
    // Collide with new instrument
    
    var c = collision_circle(x, y+headOffset, 10, objPickup, true, false)
    if c != noone {
        with c {
            instance_destroy()
        }
        
        if ds_list_size(objPlayer.tracksLost) &gt; 0 {
            var type = objPlayer.tracksLost[|0]
            ds_list_delete(objPlayer.tracksLost, 0)
        
            var w = scr_spawnWave(
                    choose(-30, room_width+30),
                    view_yview[0]+view_hview[0]-100,
                    type);
            
            w.joining = true
            w.alarm[0] = 40
            
            with objPlayer {
                ds_list_add(waves, w)
            }
        }
    }
}

if dead and y &gt; view_yview[0]+view_hview[0]+30 {
    instance_destroy()
    show_debug_message('destroying dead wave')
}

// Record recent x positions

recentI = (recentI+1) mod recentLength

xRecent[recentI] = x
yRecent[recentI] = y
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(color)

// Draw head

if not dead {
    draw_circle(x, y-headOffset, 10, false)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(color)

// Draw waveform

var xx = x
var yy = y

for (var i=0; i&lt;recentLength; i++) {
    var xx_last = xx;
    var yy_last = yy;
    
    var ri = (recentI - i);
    if ri &lt; 0 ri += recentLength
    
    var waveformI = objControlTemp.t - i
    xx = xRecent[ri] + 6*sin(waveformI/15*pi*2) + 4*sin(waveformI/8*pi*2+pi/2)
    yy = yRecent[ri]
    
    //var ii = yy;
    //xx = 6*sin(ii/40*pi*2) + 4*sin(ii/17*pi*2+pi/2)
    
    if i != 0 {
        draw_line_width(xx_last, yy_last, xx, yy, 3)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
