<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize()

c = 0
p = 0

disabled = true

num1upsInARow = 0

lastColor = -1

lastJunk = -1

gaps = ds_list_create()
ds_list_add(gaps, 3, 4, 5)
gapIndex = 0

gap = gaps[|0]



//Alarm zero is the start time for generation
alarm[0]=260; 

/*

//non important 
y=0;
x=0; 

//y spawn init 
xSpawn=0;  

//iterationCounters 
twoSecCount=0; 

randomize()

disabled = false // disable spawning during god intermission
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn powerup
if not disabled
and instance_exists(objPlayer)
and objPlayer.state == 0
and ds_list_size(objPlayer.waves) != 4 {
    instance_create(random_range(100, room_width-100), view_yview[0] - 30, objPickup)
}

alarm[5] = 200
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xSpawn=irandom_range(60,room_width-60);  
speedHtoSet=0;
speedVtoSet=0;  
starSize=random_range(0.4,0.9); 

scr_spawnScenary(0,xSpawn,speedHtoSet,speedVtoSet, starSize,1); 

alarm[4]=8; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xSpawn=irandom_range(60,room_width-60);  
speedHtoSet=0;
speedVtoSet=0;  

scr_spawnScenary(0,xSpawn,speedHtoSet,speedVtoSet, 1,0); 

alarm[3]=6; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn colored asteroids

if not disabled {
    xSpawn=irandom_range(20,room_width-20);  
    var colorNum=choose(0,1,2,3); 
    if (xSpawn&lt;room_width/2) {
        var speedHtoSet=random(1);
    } else {
        var speedHtoSet=-random(1);
    }  
    
    with instance_create(xSpawn, view_yview[0]-32, objAsteroidColor) {
        hspeed = speedHtoSet
        vspeed = 1
        
        image_speed = 0
        
        if instance_exists(objPlayer) and ds_list_size(objPlayer.waves) &gt; 0 {
            // Only pick color that the player has available.
            var i = irandom_range(0, ds_list_size(objPlayer.waves)-1)
            image_index = objPlayer.waves[|i].type
        } else {
            image_index = choose(0, 1, 2, 3)
        }
        
        var s = choose(2, 3)
        image_xscale = s*choose(1, -1)
        image_yscale = s*choose(1, -1)
    }
    //scr_spawnObstacle(1,colorNum,speedHtoSet,speedVtoSet, xSpawn,3); 
}

alarm[2]=200;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn space junk

//update 2 second counter. 
//twoSecCount ++; 

//TODO
//implement reading an array of planned events 

if not disabled {
    xSpawn=irandom_range(20,room_width-20);
    var speedHtoSet=choose(1, -1);
    var speedVtoSet=1;  
    
    with instance_create(xSpawn, view_yview[0]-32, objSpaceJunk) {
        myHSpeed = speedHtoSet
        myVSpeed = speedVtoSet
        
        var c = choose(1, 2)
        if c == 1 {
            sprite_index = sprSatellite
            image_xscale = 0.5
        } else if c == 2 {
            sprite_index = sprSpaceship
            image_xscale = 1
        }
        
        image_yscale = image_xscale
        image_xscale *= choose(1, -1)
        myColor = choose(1,2,3,4) // doesnt matter
    }
    
    //scr_spawnObstacle(0,colorNum,speedHtoSet,speedVtoSet, xSpawn,1); 
}

alarm[1]=40;  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//alarm[1] will be on  a 2 second interval.
//alarm[1]=120; 

//alarm[2] will be on a 0.33 second interval. 
//alarm[2]=20; 

//alarm[3] will be on a 0.10 second interval. 
alarm[3]=6; 

//alarm[4] will be on a 0.14. 
alarm[4]=8; 

//alarm[5] spawns powerups
//alarm[5]=120; 

//alarm [6] will be on a 10 second interval.
//alarm[6]=600; 

//alarm[7] will be on a 12 second interval 
//alarm[7]=720; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if not disabled {
    var playerNeeds1ups = instance_exists(objPlayer)
            and objPlayer.state == 0
            and ds_list_size(objPlayer.waves) &lt; 4;
    c ++
    if c &gt; 30 {
        c -= 30
        
        var toSpawn = 'spacejunk';
        
        p ++
        if (p == gap) {
            p = 0
            
            gapIndex++
            if gapIndex == 3 {
                gapIndex = 0
                ds_list_shuffle(gaps)
            }
            gap = gaps[|gapIndex]
            
            toSpawn = 'not_chosen'
            
            if instance_exists(objPlayer)
                    and objPlayer.state == 0 {
                var numWaves = ds_list_size(objPlayer.waves) 
                
                if numWaves == 1
                or (numWaves == 2 and random(1) &lt; 0.75 and num1upsInARow &lt;= 1) 
                or (numWaves == 3 and random(1) &lt; 0.75 and num1upsInARow == 0) {
                    toSpawn = '1up'
                    num1upsInARow++
                }
            }
            if toSpawn != '1up' {
                toSpawn = 'asteroid'
                num1upsInARow = 0
            }
        }
        
        if toSpawn == 'spacejunk' {
            with instance_create(
                    irandom_range(10, room_width-10),
                    view_yview[0]-40,
                    objSpaceJunk) {
                if x &lt; room_width/2 {
                    hspeed = random(1.5);
                } else {
                    hspeed = -random(1.5)
                }
                vspeed = random_range(0.75, 1.25)
                
                var cc = choose(1, 2, 3)
                if cc = objSpawner.lastJunk {
                    cc = (cc+choose(1, 2)) mod 3
                }
                objSpawner.lastJunk = cc
                
                if cc == 1 {
                    sprite_index = sprSatellite
                    image_xscale = 0.5
                } else if cc == 2 {
                    sprite_index = sprSpaceship
                    image_xscale = 1
                } else if cc == 3 {
                    sprite_index = sprGarbageCan
                    image_xscale = 1
                }
                
                image_yscale = image_xscale
                image_xscale *= choose(1, -1)
            }
        
        } else if toSpawn == 'asteroid' {
            with instance_create(
                    irandom_range(10,room_width-10),
                    view_yview[0]-40,
                    objAsteroidColor) {
                if x &lt; room_width/2 {
                    hspeed = random(1.5);
                } else {
                    hspeed = -random(1.5)
                }
                vspeed = random_range(0.75, 1.25)
                
                image_speed = 0
                
                if instance_exists(objPlayer) and ds_list_size(objPlayer.waves) &gt; 0 {
                    // Only pick a color that the player has available.
                    var i = irandom_range(0, ds_list_size(objPlayer.waves)-1)
                    image_index = objPlayer.waves[|i].type
                    
                    // Don't pick the same color twice in a row (if we can help it).
                    // If we did, then pick the next one in the list.
                    if image_index == objSpawner.lastColor
                            and ds_list_size(objPlayer.waves) &gt; 1 {
                        i = (i+1) mod ds_list_size(objPlayer.waves)
                        image_index = objPlayer.waves[|i].type
                    }
                    
                    objSpawner.lastColor = image_index
                } else {
                    image_index = choose(0, 1, 2, 3)
                }
                
                var s = choose(2, 3)
                image_xscale = s*choose(1, -1)
                image_yscale = s*choose(1, -1)
            }
        } else if toSpawn == '1up' {
            with instance_create(
                    random_range(100, room_width-100),
                    view_yview[0] - 40,
                    objPickup) {
                vspeed = 1
            }
        }
    }
}

//ySpawn=view_yview[0];


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
